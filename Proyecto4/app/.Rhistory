# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
problem$state.initial = c(7,1)
problem$state.final   = c(1,7)
problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = paste0("Laberinto")
problem$mapa = read.csv("../data/Laberinto.txt", header = F, colClasses = "character")
return(problem)
}
problem = list()
problem$state.initial = c(7,1)
problem$state.final   = c(1,7)
problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = paste0("Laberinto")
problem$mapa = read.csv("../data/Laberinto.txt", header = F, colClasses = "character")
problem = list()
problem$state.initial = c(7,1)
problem$state.final   = c(1,7)
problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = paste0("Laberinto")
problem$mapa = read.csv("../data/Laberinto.txt", header = F, colClasses = "character")
problem$mapa = read.csv("../data/map.txt", header = F, colClasses = "character")
problem$mapa = read.csv("../data/map.txt", colClasses = "character")
problem$mapa = read.csv("../data/map.txt", header = F, colClasses = "character")
problem$mapa = read.csv("./data/map.txt", header = F, colClasses = "character")
problem$mapa = read.csv("../data/map.txt/", header = F, colClasses = "character")
problem$mapa = read.csv("map.txt", header = F, colClasses = "character")
return(problem)
problem$mapa = read.csv("map.txt", header = F, colClasses = "character")
shiny::runApp('SisInteligentesG9/Proyecto4/app')
install.packages(c("RKEEL", "caret", "ggplot2", "lattice", "plotly"))
install.packages(c("RKEEL", "caret", "ggplot2", "lattice", "plotly"))
install.packages(c("RKEEL", "caret", "ggplot2", "lattice", "plotly"))
