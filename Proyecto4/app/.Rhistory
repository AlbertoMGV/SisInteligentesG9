# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
# problem$state.initial = <Insert code here>
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
}
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state,action,problem){
result = FALSE
# <insert code here in order to calculate result value>
return(result)
}
# =======================================================================
# Must return the state resulting on applying the action over the state
effect = function (state,action){
result = state
# <insert code here in order to modify the resulting state>
return(result)
}
# =======================================================================
# Must return TRUE or FALSE according with the state is final or not
# * In case the final state is stablished by a condition, second argument
#   could be omited
is.final.state = function (state, finalstate=NULL){
result = TRUE
# <insert code here in order to modify the resulting state>
return(result)
}
# =======================================================================
# Must print the state in console (in a legible way)
to.string = function (state){
# <insert code here to print the state>
}
# =======================================================================
# Return the cost of applying an action over a state
get.cost = function (action,state){
# Return the cost of applying an action over a state
return(1)
}
# =======================================================================
# (Used for Informed Algorithms)
# Heuristic function used in Informed algorithms
get.evaluation = function(state,problem){
return(1)
}
View(get.evaluation)
View(effect)
library(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp('SisInteligentesG9/Proyecto3/app')
runApp('SisInteligentesG9/Proyecto3/app')
runApp('SisInteligentesG9/Proyecto3/app')
shiny::runApp('SisInteligentesG9/Proyecto3/app')
install.packages("plotly")
runApp('SisInteligentesG9/Proyecto3/app')
shiny::runApp('SisInteligentesG9/Proyecto4/app')
runApp('SisInteligentesG9/Proyecto4/app')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Upload a File & Select attribute"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "1. Choose a File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv",".dat")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "2. Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "3. Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "4. Display",
choices = c(Head = "head",
All = "all"),
selected = "head"),
selectInput("combobox","5. Select an attribute to predict",choices = c("Batting_average" = 1,"On.base_percentage"=2,
"Runs"=3,"Hits"=4,"Doubles"=5,"Triples"=6,"HomeRuns"=7,"Runs_batted_in"=8,"Walks"=9,"Strike.Outs"=10,
"Stolen_bases"=11,"Errors"=12,"Free_agency_eligibility"=13,"Free_agent"=14,"Arbitration_eligibility"=15,"Arbitration"=16,
"Salary"))
),
mainPanel(
tabsetPanel(id = "tabs",
tabPanel("Content",tableOutput("contents")),
tabPanel("Target",plotOutput("target"))
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
library(plotly)
output$target <- renderPlot({
#TODO: Use this var for selecting Target
type = input$combobox
err=0
errs=c()
data = read.keel(input$file1$datapath)
data$Salary=as.numeric(data$Salary)
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
MAE = MAE(prediction, test.data$Salary)
errs = c(errs, MAE)
#plot(prediction)
#plot(linear.model,which=c(1:6))
#plot(linear.model)
#plot(prediction, test.data)
}
for (er in errs) {
print(er)
err=err+er
}
barplot(errs,main="Error in each Fold",
xlab=paste("Error medio (linea roja): ", toString(round(err/5,2))), col=c("lightblue"), ylim=c(0,32),names.arg=c("Fold 1", "Fold 2", "Fold 3", "Fold 4", "Fold 5"))
abline(h=err/5, col="red")
})
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
dat <- read.keel(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(dat))
}
else {
return(dat)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('SisInteligentesG9/Proyecto4/app')
runApp('SisInteligentesG9/Proyecto4/app')
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 27/03/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# Cargamos librerias
library(rpart)
library(rpart.plot)
library(C50)
library(caret)
#Cargamos data
data <- read.csv(file = "../data/churn.csv")
folds <- createMultiFolds(y = data$Churn, k = 10, times = 5)
tasaAciertoIndi = 0
tasaAciertoITot = 0
for(i in 1:5){
tasaAciertoIndi = 0
#Creamos sets de datos
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Arbol de decis por cada uno
#TODO: Aqui tenemos que meter el min max y CP!!!
model <- rpart(formula=Churn~., data=train.data)
#Predicciones
prediction <- predict(model, test.data, type="class")
#acciertos
tasaAciertoIndi = sum(prediction == test.data$Churn) / nrow(test.data)
tasaAciertoITot = tasaAciertoITot + tasaAciertoIndi
print(paste("Tasa acierto ejecucion Nº",i,": ",tasaAciertoIndi))
#Representacion Visual
rpart.plot(x=model)
}
print(paste("Tasa de acierto medio: ", tasaAciertoITot/5))
install.packages("rpart")
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 27/03/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# Cargamos librerias
library(rpart)
library(rpart.plot)
library(C50)
library(caret)
#Cargamos data
data <- read.csv(file = "../data/churn.csv")
folds <- createMultiFolds(y = data$Churn, k = 10, times = 5)
tasaAciertoIndi = 0
tasaAciertoITot = 0
for(i in 1:5){
tasaAciertoIndi = 0
#Creamos sets de datos
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Arbol de decis por cada uno
#TODO: Aqui tenemos que meter el min max y CP!!!
model <- rpart(formula=Churn~., data=train.data)
#Predicciones
prediction <- predict(model, test.data, type="class")
#acciertos
tasaAciertoIndi = sum(prediction == test.data$Churn) / nrow(test.data)
tasaAciertoITot = tasaAciertoITot + tasaAciertoIndi
print(paste("Tasa acierto ejecucion Nº",i,": ",tasaAciertoIndi))
#Representacion Visual
rpart.plot(x=model)
}
print(paste("Tasa de acierto medio: ", tasaAciertoITot/5))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
