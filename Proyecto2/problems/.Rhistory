q()
#leemos datos
datuak<-read.table(file="C:\\Users\\evidapc\\Documents\\BERTA\\ANE\\estadistica\\BASE DE DATOS ACTUALIZADA DIC-18 (2).txt", header=TRUE, dec=",", sep="\t")
table(datuak$LawtonX)
prop.table(table(datuak$LawtonX))*100
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
problem$state.initial = c(7,1)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP40.txt", header = F, skip=42, dec = ".", sep = " ")
return(problem)
}
View(initialize.problem)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
problem$state.initial = c(7,1)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP40.txt", header = F, skip=42, dec = ".", sep = " ")
return(problem)
}
View(datuak)
View(initialize.problem)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
problem$state.initial = c(7,1)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP40.txt", header = F, skip=42, dec = ".", sep = " ")
return(problem)
}
initialize.problem()
setwd("~/ALBERTO/SisInteligentesG9/Proyecto2/problems")
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
problem$state.initial = c(7,1)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP40.txt", header = F, skip=42, dec = ".", sep = " ")
return(problem)
}
initialize.problem()
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
problem$state.initial = c(7,1)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP40.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = p
return(problem)
}
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
problem$state.initial = c(7,1)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP40.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
#problem$state.final   = c(1,7)
#problem$actions.possible = data.frame(action=c("u","r","d","l"), stringsAsFactors = F)   # u= up | r = rigth ....
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
