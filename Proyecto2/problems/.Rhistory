# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
# problem$state.initial = <Insert code here>
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
}
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state,action,problem){
result = FALSE
# <insert code here in order to calculate result value>
return(result)
}
# =======================================================================
# Must return the state resulting on applying the action over the state
effect = function (state,action){
result = state
# <insert code here in order to modify the resulting state>
return(result)
}
# =======================================================================
# Must return TRUE or FALSE according with the state is final or not
# * In case the final state is stablished by a condition, second argument
#   could be omited
is.final.state = function (state, finalstate=NULL){
result = TRUE
# <insert code here in order to modify the resulting state>
return(result)
}
# =======================================================================
# Must print the state in console (in a legible way)
to.string = function (state){
# <insert code here to print the state>
}
# =======================================================================
# Return the cost of applying an action over a state
get.cost = function (action,state){
# Return the cost of applying an action over a state
return(1)
}
# =======================================================================
# (Used for Informed Algorithms)
# Heuristic function used in Informed algorithms
get.evaluation = function(state,problem){
return(1)
}
View(get.evaluation)
View(effect)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
setwd("~/SisInteligentesG9/Proyecto2/problems")
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(P){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$P = P
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
View(initialize.problem)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(4,18)
problem$name = "PHub40"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
initialize.problem(3)
