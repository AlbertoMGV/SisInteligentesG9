q()
#leemos datos
datuak<-read.table(file="C:\\Users\\evidapc\\Documents\\BERTA\\ANE\\estadistica\\BASE DE DATOS ACTUALIZADA DIC-18 (2).txt", header=TRUE, dec=",", sep="\t")
table(datuak$LawtonX)
prop.table(table(datuak$LawtonX))*100
setwd("~/ALBERTO/SisInteligentesG9/Proyecto2/problems")
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,15)
problem$name = "PHub10"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$mapa[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,7)
problem$name = "PHub10"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$mapa[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,7)
problem$name = "PHub10"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$mapa[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,7)
problem$name = "PHub10"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$mapa[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,7)
problem$name = "PHub10"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$mapa[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,7)
problem$name = "PHub10"
problem$mapa = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$mapa[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
View(initialize.problem)
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,7)
problem$name = "PHub10"
problem$aeropuertos = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$aeropuertos[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(Pnum){
problem = list()
#Aqui eligo los dos principales aleatorios para empesar lel
problem$state.initial = c(5,7)
problem$name = "PHub10"
problem$aeropuertos = read.csv("../data/AP10.txt", header = F, skip=42, dec = ".", sep = " ")
problem$Pnum = Pnum
return(problem)
}
#Le paso el numero de aeropueropuertos principales
problem = initialize.problem(3)
print(problem$aeropuertos[problem$state.initial[1],problem$state.initial[2]])
print(problem$state.initial[1])
print(problem$state.initial[2])
print(problem$aeropuertos)
print(problem$aeropuertos[1])
print(problem$aeropuertos.lenght)
print(problem$aeropuertos.length)
print(problem$aeropuertos.length())
print(problem$aeropuertos)
print(problem$aeropuertos[1].length)
print(problem$aeropuertos[1].lenght)
print(problem$aeropuertos[1].lenght)
print(problem$aeropuertos[1])
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state,action,problem){
result = FALSE
#
return(result)
}
a=c(1,2,3)
print(a)
a=c(1,2,3)
print(a[1])
for (aa in 10) {
print("x")
}
d
start
help
print(a)
print(aa)
for (aa in 10) {
print("aa")
}
