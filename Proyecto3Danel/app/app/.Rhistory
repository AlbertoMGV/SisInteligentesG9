# There are many commands to create and initialize vectors (and matrices)
vec_1 = 1:10               # Numbers from 1 to 10
vec_2 = seq(1, 10, 2)      # Sequence from 1 to 10 adding 2 in each step
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
graphics.off()
# To declare vectors, just assign them, and just call a variable to show its
# content by the console
vec = c(1,2,3,4,5,6)
vec
vec = c(TRUE, TRUE, FALSE, TRUE)
rm(list = ls())
cat("\014")
graphics.off()
#    (submission of the entire template folder is recommended)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
help("*");
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
# problem$state.initial = <Insert code here>
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
}
tab
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(rows=7,columns=7,tab = sample(0:31,32,F)){
tab
problem = list()
p<-scan("./Pr1_AlbertoMiranda_DanelLorente/data/Laberinto.txt", what = numeric(), sep = ",")
ma<-matrix(p,7,byrow = F)
ma
problem$state.initial(ma)
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
problem$actions.possible = data.frame(mov=c("Up","Down","Left","Right"), stringsAsFactors = F)
problem$rows = rows
problem$columns = columns
# problem$<aditional info> = <Insert code here>
return(problem)
}
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(rows=7,columns=7,tab = sample(0:31,32,F)){
problem = list()
p<-scan("./Pr1_AlbertoMiranda_DanelLorente/data/Laberinto.txt", what = numeric(), sep = ",")
ma<-matrix(p,7,byrow = F)
ma
problem$state.initial(ma)
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
problem$actions.possible = data.frame(mov=c("Up","Down","Left","Right"), stringsAsFactors = F)
problem$rows = rows
problem$columns = columns
# problem$<aditional info> = <Insert code here>
return(tab)
}
# =======================================================================
# Names:
# Group Number:
# Assignment:
# Date:
# =======================================================================
# 1. Be sure to include, with this template, any necessary files
library("readr")
library(ggplot2)
library(gridExtra)
install.packages("ggplot2")
install.packages("gridExtra")
# =======================================================================
# Names:
# Group Number:
# Assignment:
# Date:
# =======================================================================
# 1. Be sure to include, with this template, any necessary files
library("readr")
library(ggplot2)
library(gridExtra)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(rows=7,columns=7,tab = sample(0:31,32,F)){
problem = list()
p<-scan("./Pr1_AlbertoMiranda_DanelLorente/data/Laberinto.txt", what = numeric(), sep = ",")
ma<-matrix(p,7,byrow = F)
ma
problem$state.initial(ma)
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
problem$actions.possible = data.frame(mov=c("Up","Down","Left","Right"), stringsAsFactors = F)
problem$rows = rows
problem$columns = columns
# problem$<aditional info> = <Insert code here>
return(tab)
}
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(rows=7,columns=7,tab = sample(0:31,32,F)){
problem = list()
p<-scan("./Pr1_AlbertoMiranda_DanelLorente/data/Laberinto.txt", what = numeric(), sep = ",")
ma<-matrix(p,7,byrow = F)
ma
problem$state.initial(ma)
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
problem$actions.possible = data.frame(mov=c("Up","Down","Left","Right"), stringsAsFactors = F)
problem$rows = rows
problem$columns = columns
# problem$<aditional info> = <Insert code here>
return(problem)
}
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(rows=7,columns=7,tab = sample(0:31,32,F)){
problem = list()
p<-scan("./Pr1_AlbertoMiranda_DanelLorente/data/Laberinto.txt", what = numeric(), sep = ",")
ma<-matrix(p,7,byrow = F)
ma
problem$state.initial(ma)
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
problem$actions.possible = data.frame(mov=c("Up","Down","Left","Right"), stringsAsFactors = F)
problem$rows = rows
problem$columns = columns
# problem$<aditional info> = <Insert code here>
return(problem)
}
problem
initialize.problem()
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
problem = ini(rows=7,columns=7,tab = sample(0:31,32,F)){
problem = list()
p<-scan("./Pr1_AlbertoMiranda_DanelLorente/data/Laberinto.txt", what = numeric(), sep = ",")
ma<-matrix(p,7,byrow = F)
ma
problem$state.initial(ma)
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
problem$actions.possible = data.frame(mov=c("Up","Down","Left","Right"), stringsAsFactors = F)
problem$rows = rows
problem$columns = columns
# problem$<aditional info> = <Insert code here>
return(problem)
}
View(initialize.problem)
?sliderInput()
?sliderInput
?sliderInput
?sliderInput
devtools::install_github("rstudio/shinyapps")
install_github("rstudio/shinyapps")
githubinstall("rstudio/shinyapps")
githubinstall("shinyapps")
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
--version
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='02245040667c004b35d1d806a2c9df0f', token='02245040667C004B35D1D806A2C9DF0F', secret='DBU6aPYnIjQ1Z/w9A9lYVs3N07GNvbVI6tlj3IQz')
install.packages("shiny")
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(RKEEL)
#Load data
data <- read.keel("../data/baseball.dat")
# Define UI for application that draws a histogram
ui <- fluidPage()
# Define server logic required to draw a histogram
server <- function(input, output) {
}
# Run the application, creating shiny object
shinyApp(ui = ui, server = server)
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
library(shiny)
library(RKEEL)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("Upload a File"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv",".dat")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(
tabsetPanel(id = "tabs",
tabPanel("Content",tableOutput("contents")),
tabPanel("Data")
)
)
)
)
runApp()
runApp()
