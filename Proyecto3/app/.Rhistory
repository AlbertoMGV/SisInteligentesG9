cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=c()
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
print(errs[2])
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=c()
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
print(errs[5])
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=c()
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
print(errs[6])
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=c()
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
print(errs)
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=c()
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
print(errs)
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=c()
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
for (er in errs) {
err=err+er
}
print(err)
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=c()
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
for (er in errs) {
print(er)
err=err+er
}
print(err)
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=0
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
for (er in errs) {
print(er)
err=err+er
}
print(err)
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# =======================================================================
# Names: Alberto Miranda & Danel Lorente
# Group Number:
# Assignment: Sistemas Inteligentes
# Date: 23/04/2019
# =======================================================================
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
err=0
errs=c()
data = read.keel("../data/baseball.dat")
data$Salary=as.numeric(data$Salary)
# Split the data into training and test set
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
#Segement your data by fold using the which() function
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]
#Use the test and train data partitions however you desire...
linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
#err <- predict  - test.data$Salary
MAE = MAE(prediction, test.data$Salary)
#err=abs(prediction - test.data$Salary)
errs = c(errs, MAE)
#accuracy <-  data.frame( R2 = R2(prediction, test.data$Salary, form = "traditional"),
#                         RMSE = RMSE(prediction, test.data$Salary),
#                         MAE = MAE(prediction, test.data$Salary))
#print(accuracy)
}
for (er in errs) {
print(er)
err=err+er
}
print(err/5)
# Define training control
#train.control <- trainControl(method = "cv", number = 5, savePredictions = "all")
# Train the model
#model <- train(Salary ~., data = data$Salary, method = "lm",
#trControl = train.control)
#summary(model)
#model$result
#print(prediction - test.data)
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define server logic required to draw a histogram
server <- function(input, output) {
library(RKEEL)
library(caret)
library(ggplot2)
library(lattice)
output$target <- renderPlot({
#TODO: Use this var for selecting Target
type = input$combobox
err=0
errs=c()
data = read.keel(input$file1$datapath)
data$Salary=as.numeric(data$Salary)
folds <- createMultiFolds(y = data$Salary, k = 10, times = 5)
for(i in 1:5){
train.data  <- data[folds[[i]], ]
test.data <- data[-folds[[i]], ]linear.model <- lm(Salary ~., train.data)
prediction <- predict(linear.model, test.data)
MAE = MAE(prediction, test.data$Salary)
errs = c(errs, MAE)
#plot(prediction)
#plot(linear.model,which=c(1:6))
#plot(linear.model)
#plot(prediction, test.data)
}
for (er in errs) {
print(er)
err=err+er
}
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = 5, col = 'darkgray', border = 'white')
})
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
dat <- read.keel(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(dat))
}
else {
return(dat)
}
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
